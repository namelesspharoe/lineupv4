rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    function isAdmin() {
      return isSignedIn() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        getUserData().role == 'admin';
    }
    
    function isInstructor() {
      return isSignedIn() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        getUserData().role == 'instructor';
    }
    
    function isStudent() {
      return isSignedIn() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        getUserData().role == 'student';
    }

    // Allow users to read and write their own messages
    match /messages/{messageId} {
      // Allow read access for all users
      allow read: if true;
      // Keep write access restricted to authenticated users if necessary
      allow write: if request.auth != null;
    }
    
    // group messages 
     // Allow authenticated users to read/write conversations (for group messaging)
    match /conversations/{conversationId} {
      allow read, write: if request.auth != null;
    }

    // Users collection
    match /users/{userId} {
      allow read: if 
        // Allow public read access for instructors
        (resource.data.role == 'instructor') ||
        // Allow public read access for students (for review display)
        (resource.data.role == 'student') ||
        // Allow signed-in users to read any user data
        isSignedIn();
        
      allow create: if 
        // Allow admins to create any user
        (isAdmin() && request.resource.data.keys().hasAll(['email', 'name', 'role']) && (request.resource.data.role in ['student', 'instructor', 'admin'])) ||
        // Allow users to create their own account
        (isSignedIn() && isOwner(userId) && request.resource.data.keys().hasAll(['email', 'name', 'role']) && (request.resource.data.role in ['student', 'instructor', 'admin']));
        
      allow update: if isSignedIn() && (
        isOwner(userId) ||
        isAdmin()
      );
      allow delete: if isAdmin();
    }

    // Lessons collection
    match /lessons/{lessonId} {
      allow read: if 
        // Allow public read access to completed lessons (for reviews)
        (resource.data.status == 'completed' && resource.data.instructorId != null) ||
        // Allow signed-in users to read lessons they're enrolled in
        (isSignedIn() && (
          // Allow students to read lessons they're enrolled in
          (isStudent() && request.auth.uid in resource.data.studentIds) ||
          // Allow instructors to read ALL lessons
          isInstructor() ||
          // Allow admins to read all lessons
          isAdmin() ||
          // Allow students to read available lessons
          (isStudent() && resource.data.status == 'available')
        ));
      
      allow create: if isSignedIn() && (
        // Allow students to book lessons (simplified check)
        (request.auth.uid in request.resource.data.studentIds) ||
        // Allow instructors to create lessons (simplified check)
        (request.auth.uid == request.resource.data.instructorId) ||
        // Allow admins to create lessons
        isAdmin()
      ) && 
      // Validate required fields and their types
      request.resource.data.keys().hasAll([
        'title',
        'instructorId',
        'studentIds',
        'date',
        'status',
        'type',
        'maxStudents',
        'skillLevel',
        'price',
        'description'
      ]) && 
      // Validate field types and values
      request.resource.data.studentIds is list &&
      request.resource.data.type in ['private', 'group', 'workshop'] &&
      request.resource.data.status in ['available', 'scheduled', 'in_progress', 'completed', 'cancelled'] &&
      request.resource.data.skillLevel in ['first_time', 'developing_turns', 'linking_turns', 'confident_turns', 'consistent_blue'] &&
      request.resource.data.maxStudents is number &&
      request.resource.data.price is number;
      
      allow update: if isSignedIn() && (
        isAdmin() ||
        (isInstructor() && resource.data.instructorId == request.auth.uid) ||
        (isStudent() && request.auth.uid in resource.data.studentIds)
      );
      
      allow delete: if isSignedIn() && (
        isAdmin() ||
        (isInstructor() && resource.data.instructorId == request.auth.uid && resource.data.status != 'completed')
      );
    }
    
    // Allow authenticated users to read/write achievements
    match /achievements/{achievementId} {
     allow read, write: if request.auth != null;
    }
    
    // Allow authenticated users to read/write student progress
    match /studentProgress/{progressId} {
      allow read, write: if request.auth != null;
    }
    
    // Allow authenticated users to read/write skill progress
    match /skillProgress/{progressId} {
      allow read, write: if request.auth != null;
    }
    
    // Allow authenticated users to read/write lesson feedback
    match /lessonFeedback/{feedbackId} {
      allow read, write: if request.auth != null;
    }
    
    // Allow public read access to instructor stats for public profiles
    match /instructorStats/{instructorId} {
      allow read: if true; // Public read access for instructor stats
      allow write: if request.auth != null;
    }
    
    match /reviews/{reviewId} {
      allow read: if request.auth != null; // Allow read only if authenticated
      allow write: if false; // Prevent writes for this example
    }
  

    // TimeEntries collection
    match /timeEntries/{entryId} {
      allow read: if isSignedIn() && (
        request.auth.uid == resource.data.instructorId ||
        isAdmin()
      );
      
      allow create: if isSignedIn() 
        && isInstructor()
        && request.auth.uid == request.resource.data.instructorId;
      
      allow update: if isSignedIn()
        && (request.auth.uid == resource.data.instructorId || isAdmin());
      
      allow delete: if isAdmin();
    }

    // Instructor Availability collection
    match /instructorAvailability/{availabilityId} {
      allow read: if isSignedIn();
      
      allow create: if isSignedIn() && (
        // Allow instructors to create their own availability
        (isInstructor() && request.auth.uid == request.resource.data.instructorId) ||
        // Allow admins to create availability for any instructor
        isAdmin()
      ) &&
      request.resource.data.keys().hasAll(['instructorId', 'date', 'startTime', 'endTime', 'createdAt', 'updatedAt']) &&
      request.resource.data.instructorId is string &&
      request.resource.data.date is string &&
      request.resource.data.startTime is string &&
      request.resource.data.endTime is string &&
      // Allow optional fields from timesheet integration
      (request.resource.data.source == null || request.resource.data.source in ['manual', 'timesheet', 'pattern']) &&
      (request.resource.data.timeEntryId == null || request.resource.data.timeEntryId is string) &&
      (request.resource.data.hourlyRate == null || request.resource.data.hourlyRate is number) &&
      (request.resource.data.totalEarnings == null || request.resource.data.totalEarnings is number);
      
      allow update: if isSignedIn() && (
        request.auth.uid == resource.data.instructorId ||
        isAdmin()
      );
      
      allow delete: if isSignedIn() && (
        request.auth.uid == resource.data.instructorId ||
        isAdmin()
      );
    }

    // Kid Profiles collection
    match /kid_profiles/{profileId} {
      allow read: if isSignedIn() && (
        // Allow parents to read their own children's profiles
        request.auth.uid == resource.data.parentId ||
        // Allow admins to read all profiles
        isAdmin() ||
        // Allow instructors to read profiles (for lesson planning)
        isInstructor()
      );
      
      allow create: if isSignedIn() && (
        // Allow parents to create profiles for their children
        (isStudent() && request.auth.uid == request.resource.data.parentId) ||
        // Allow admins to create any profile
        isAdmin()
      ) &&
      request.resource.data.keys().hasAll([
        'parentId',
        'name',
        'age',
        'allergies',
        'helmet_color',
        'jacket_color',
        'pants_color',
        'level',
        'emergency_contact_name',
        'emergency_contact_phone',
        'emergency_contact_relationship',
        'created_at',
        'updated_at'
      ]) &&
      request.resource.data.parentId is string &&
      request.resource.data.name is string &&
      request.resource.data.age is number &&
      request.resource.data.age >= 0 &&
      request.resource.data.age <= 18 &&
      request.resource.data.level in ['first_time', 'developing_turns', 'linking_turns', 'confident_turns', 'consistent_blue'];
      
      allow update: if isSignedIn() && (
        // Allow parents to update their own children's profiles
        request.auth.uid == resource.data.parentId ||
        // Allow admins to update any profile
        isAdmin()
      );
      
      allow delete: if isSignedIn() && (
        // Allow parents to delete their own children's profiles
        request.auth.uid == resource.data.parentId ||
        // Allow admins to delete any profile
        isAdmin()
      );
    }
  }
}
